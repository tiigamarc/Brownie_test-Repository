{"version":3,"sources":["artifacts/deployments lazy /^/.//.*/.json$/ groupOptions: {} namespace object","getEthereum.js","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","getEthereum","a","document","readyState","setTimeout","window","ethereum","getWeb3","web3","Web3","provider","providers","HttpProvider","App","state","accounts","chainid","simpleStorage","storageValue","storageInput","transactionHash","componentDidMount","request","method","console","log","eth","getAccounts","parseInt","getChainId","loadInitialContracts","setState","_chainID","loadContract","methods","get","call","chain","contractName","address","undefined","contractArtifact","Contract","abi","changeStorage","preventDefault","value","isNaN","alert","set","send","from","on","this","isAccountsUnlocked","length","className","onSubmit","name","type","onChange","target","disabled","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af42ea90.chunk.js","sourcesContent":["var map = {\n\t\"./3/0x724771D9259Cb16a959152103c0D2630701aAeF3.json\": [\n\t\t417,\n\t\t3\n\t],\n\t\"./dev/0x724771D9259Cb16a959152103c0D2630701aAeF3.json\": [\n\t\t418,\n\t\t4\n\t],\n\t\"./map.json\": [\n\t\t82\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 415;\nmodule.exports = webpackAsyncContext;","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 100))\n    }\n\n    return window.ethereum\n\n}\n","import Web3 from \"web3\";\nimport {getEthereum} from \"./getEthereum\";\n\nexport const getWeb3 = async () => {\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    return web3\n}","import React, { Component } from \"react\"\nimport './App.css'\nimport { getWeb3 } from \"./getWeb3\"\nimport map from \"./artifacts/deployments/map.json\"\nimport { getEthereum } from \"./getEthereum\"\nclass App extends Component {\n    state = {\n        web3: null,\n        accounts: null,\n        chainid: null,\n        simpleStorage: null,\n        storageValue: 0,\n        storageInput: 0,\n        transactionHash: null\n    }\n    componentDidMount = async () => {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n        // Try and enable accounts (connect metamask)\n        try {\n            const ethereum = await getEthereum()\n            // ethereum.enable()\n            ethereum.request({ method: 'eth_requestAccounts' });\n        } catch (e) {\n            console.log(`Could not enable accounts. \n            Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`)\n            console.log(e)\n        }\n        // Use web3 to get the users accounts\n        const accounts = await web3.eth.getAccounts()\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n        this.setState({\n            web3,\n            accounts,\n            chainid\n        }, await this.loadInitialContracts)\n    }\n    loadInitialContracts = async () => {\n        var _chainID = 0;\n        if (this.state.chainid === 3) {\n            _chainID = 3;\n        }\n        if (this.state.chainid === 1337) {\n            _chainID = \"dev\"\n        }\n        const simpleStorage = await this.loadContract(_chainID, \"SimpleStorage\")\n        if (!simpleStorage) {\n            return\n        }\n        const storageValue = await simpleStorage.methods.get().call()\n        this.setState({\n            simpleStorage,\n            storageValue,\n        })\n    }\n    loadContract = async (chain, contractName) => {\n        // Load a deployed contract instance into a web3 contract object\n        const { web3 } = this.state\n        // Get the address of the most recent deployment from the deployment map\n        let address\n        try {\n            address = map[chain][contractName][0]\n        } catch (e) {\n            console.log(`Could not find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n            return undefined\n        }\n        // Load the artifact with the specified address\n        let contractArtifact\n        try {\n            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n        } catch (e) {\n            console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n            return undefined\n        }\n        return new web3.eth.Contract(contractArtifact.abi, address)\n    }\n    changeStorage = async (e) => {\n        const { accounts, simpleStorage, storageInput } = this.state\n        e.preventDefault()\n        const value = parseInt(storageInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await simpleStorage.methods.set(value).send({ from: accounts[0] })\n            .on('transactionHash', async (transactionHash) => {\n                this.setState({ transactionHash })\n            })\n            .on('receipt', async () => {\n                this.setState({\n                    storageValue: await simpleStorage.methods.get().call()\n                })\n            })\n    }\n    render() {\n        const {\n            web3,\n            accounts,\n            simpleStorage,\n            storageValue,\n            storageInput,\n            transactionHash\n        } = this.state\n        if (!web3) {\n            return <div>Loading Web3, accounts, and contracts...</div>\n        }\n        if (!simpleStorage) {\n            return <div>Could not find a deployed contract. Check console for details.</div>\n        }\n        const isAccountsUnlocked = accounts ? accounts.length > 0 : false\n        return (<div className=\"App\">\n            {\n                !isAccountsUnlocked ?\n                    <p><strong>Connect with Metamask and refresh the page to\n                        be able to edit the storage fields.</strong>\n                    </p>\n                    : null\n            }\n            <h1>Simple Storage</h1>\n            <div>The current stored value is {storageValue}.</div>\n            <br />\n            <form onSubmit={(e) => this.changeStorage(e)}>\n                <div>\n                    <label>Change the value to </label>\n                    <input\n                        name=\"storageInput\"\n                        type=\"text\"\n                        value={storageInput}\n                        onChange={(e) => this.setState({ storageInput: e.target.value })}\n                    />.\n                    <p>\n                        <button type=\"submit\" disabled={!isAccountsUnlocked}>Submit</button>\n                    </p>\n                </div>\n            </form>\n            <br />\n            {transactionHash ?\n                <div>\n                    <p>Last transaction Hash: {transactionHash}</p>\n                </div>\n                : null\n            }\n        </div>)\n    }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}