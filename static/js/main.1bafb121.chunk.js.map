{"version":3,"sources":["artifacts/deployments lazy /^/.//.*/.json$/ groupOptions: {} namespace object","getEthereum.js","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","getEthereum","a","document","readyState","setTimeout","window","ethereum","getWeb3","web3","Web3","provider","providers","HttpProvider","App","state","accounts","chainid","vyperStorage","vyperValue","vyperInput","solidityStorage","solidityValue","solidityInput","componentDidMount","enable","console","log","eth","getAccounts","parseInt","getChainId","loadInitialContracts","setState","_chainID","loadContract","methods","get","call","chain","contractName","address","undefined","contractArtifact","Contract","abi","changeVyper","preventDefault","value","isNaN","alert","set","send","from","on","changeSolidity","this","isAccountsUnlocked","length","className","onSubmit","name","type","onChange","target","disabled","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1bafb121.chunk.js","sourcesContent":["var map = {\n\t\"./3/0x724771D9259Cb16a959152103c0D2630701aAeF3.json\": [\n\t\t417,\n\t\t3\n\t],\n\t\"./dev/0x724771D9259Cb16a959152103c0D2630701aAeF3.json\": [\n\t\t418,\n\t\t4\n\t],\n\t\"./map.json\": [\n\t\t82\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 415;\nmodule.exports = webpackAsyncContext;","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 100))\n    }\n\n    return window.ethereum\n\n}\n","import Web3 from \"web3\";\nimport {getEthereum} from \"./getEthereum\";\n\nexport const getWeb3 = async () => {\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    return web3\n}","import React, {Component} from \"react\"\nimport './App.css'\nimport {getWeb3} from \"./getWeb3\"\nimport map from \"./artifacts/deployments/map.json\"\nimport {getEthereum} from \"./getEthereum\"\n\nclass App extends Component {\n\n    state = {\n        web3: null,\n        accounts: null,\n        chainid: null,\n        vyperStorage: null,\n        vyperValue: 0,\n        vyperInput: 0,\n        solidityStorage: null,\n        solidityValue: 0,\n        solidityInput: 0,\n    }\n\n    componentDidMount = async () => {\n\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n\n        // Try and enable accounts (connect metamask)\n        try {\n            const ethereum = await getEthereum()\n            ethereum.enable()\n        } catch (e) {\n            console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`)\n            console.log(e)\n        }\n\n        // Use web3 to get the user's accounts\n        const accounts = await web3.eth.getAccounts()\n\n        // Get the current chain id\n        const chainid = parseInt(await web3.eth.getChainId())\n\n        this.setState({\n            web3,\n            accounts,\n            chainid\n        }, await this.loadInitialContracts)\n\n    }\n\n    loadInitialContracts = async () => {\n        // <=42 to exclude Kovan, <42 to include kovan\n        if (this.state.chainid < 42) {\n            // Wrong Network!\n            return\n        }\n        console.log(this.state.chainid)\n        \n        var _chainID = 0;\n        if (this.state.chainid === 42){\n            _chainID = 42;\n        }\n        if (this.state.chainid === 1337){\n            _chainID = \"dev\"\n        }\n        console.log(_chainID)\n        const vyperStorage = await this.loadContract(_chainID,\"VyperStorage\")\n        const solidityStorage = await this.loadContract(_chainID,\"SolidityStorage\")\n\n        if (!vyperStorage || !solidityStorage) {\n            return\n        }\n\n        const vyperValue = await vyperStorage.methods.get().call()\n        const solidityValue = await solidityStorage.methods.get().call()\n\n        this.setState({\n            vyperStorage,\n            vyperValue,\n            solidityStorage,\n            solidityValue,\n        })\n    }\n\n    loadContract = async (chain, contractName) => {\n        // Load a deployed contract instance into a web3 contract object\n        const {web3} = this.state\n\n        // Get the address of the most recent deployment from the deployment map\n        let address\n        try {\n            address = map[chain][contractName][0]\n        } catch (e) {\n            console.log(`Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`)\n            return undefined\n        }\n\n        // Load the artifact with the specified address\n        let contractArtifact\n        try {\n            contractArtifact = await import(`./artifacts/deployments/${chain}/${address}.json`)\n        } catch (e) {\n            console.log(`Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`)\n            return undefined\n        }\n\n        return new web3.eth.Contract(contractArtifact.abi, address)\n    }\n\n    changeVyper = async (e) => {\n        const {accounts, vyperStorage, vyperInput} = this.state\n        e.preventDefault()\n        const value = parseInt(vyperInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await vyperStorage.methods.set(value).send({from: accounts[0]})\n            .on('receipt', async () => {\n                this.setState({\n                    vyperValue: await vyperStorage.methods.get().call()\n                })\n            })\n    }\n\n    changeSolidity = async (e) => {\n        const {accounts, solidityStorage, solidityInput} = this.state\n        e.preventDefault()\n        const value = parseInt(solidityInput)\n        if (isNaN(value)) {\n            alert(\"invalid value\")\n            return\n        }\n        await solidityStorage.methods.set(value).send({from: accounts[0]})\n            .on('receipt', async () => {\n                this.setState({\n                    solidityValue: await solidityStorage.methods.get().call()\n                })\n            })\n    }\n\n    render() {\n        const {\n            web3, accounts, chainid,\n            vyperStorage, vyperValue, vyperInput,\n            solidityStorage, solidityValue, solidityInput\n        } = this.state\n\n        if (!web3) {\n            return <div>Loading Web3, accounts, and contracts...</div>\n        }\n\n        // <=42 to exclude Kovan, <42 to include Kovan\n        if (isNaN(chainid) || chainid < 42) {\n            return <div>Wrong Network! Switch to your local RPC \"Localhost: 8545\" in your Web3 provider (e.g. Metamask)</div>\n        }\n\n        if (!vyperStorage || !solidityStorage) {\n            return <div>Could not find a deployed contract. Check console for details.</div>\n        }\n\n        const isAccountsUnlocked = accounts ? accounts.length > 0 : false\n\n        return (<div className=\"App\">\n            <h1>Your Brownie Mix is installed and ready.</h1>\n            <p>\n                If your contracts compiled and deployed successfully, you can see the current\n                storage values below.\n            </p>\n            {\n                !isAccountsUnlocked ?\n                    <p><strong>Connect with Metamask and refresh the page to\n                        be able to edit the storage fields.</strong>\n                    </p>\n                    : null\n            }\n            <h2>Vyper Storage Contract</h2>\n\n            <div>The stored value is: {vyperValue}</div>\n            <br/>\n            <form onSubmit={(e) => this.changeVyper(e)}>\n                <div>\n                    <label>Change the value to: </label>\n                    <br/>\n                    <input\n                        name=\"vyperInput\"\n                        type=\"text\"\n                        value={vyperInput}\n                        onChange={(e) => this.setState({vyperInput: e.target.value})}\n                    />\n                    <br/>\n                    <button type=\"submit\" disabled={!isAccountsUnlocked}>Submit</button>\n                </div>\n            </form>\n\n            <h2>Solidity Storage Contract</h2>\n            <div>The stored value is: {solidityValue}</div>\n            <br/>\n            <form onSubmit={(e) => this.changeSolidity(e)}>\n                <div>\n                    <label>Change the value to: </label>\n                    <br/>\n                    <input\n                        name=\"solidityInput\"\n                        type=\"text\"\n                        value={solidityInput}\n                        onChange={(e) => this.setState({solidityInput: e.target.value})}\n                    />\n                    <br/>\n                    <button type=\"submit\" disabled={!isAccountsUnlocked}>Submit</button>\n\n                </div>\n            </form>\n        </div>)\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}